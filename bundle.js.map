{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./App.js","webpack:///./GUI/keyboard.js","webpack:///./GUI/visualizer.js","webpack:///./synthesizer/effects.js","webpack:///./synthesizer/envelopes.js","webpack:///./synthesizer/filters.js","webpack:///./synthesizer/keyboard_scale.js","webpack:///./synthesizer/oscillators.js","webpack:///./synthesizer/pre_mixer.js","webpack:///./synthesizer/synth.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAwC;AACF;AACG;;AAEzC;AACA;AACA;AACA,wBAAwB,0DAAK;AAC7B;;AAEA;AACA,uBAAuB,qDAAQ;AAC/B;AACA,eAAe,+DAAS;;;AAGxB;AACA,CAAC,E;;;;;;;;;;;;ACjBD;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK,E;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC5JvB;AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,0B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;ACzCxB;AAAA;;AAEA;AACA;AACA,qBAAqB,yBAAyB,SAAS,2BAA2B,SAAS;;AAE3F;AACA;AACA;;AAEA,+CAA+C,qDAAqD;AACpG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,sE;;;;;;;;;;;;ACpCf;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;ACnFxB;AAAA;;AAEA;AACA;;AAEA,8CAA8C,eAAe;AAC7D,8CAA8C,eAAe;AAC7D;AACA;;AAEA;;AAEA,mCAAmC,UAAU;AAC7C,mCAAmC,SAAS;AAC5C,qCAAqC,QAAQ;;AAE7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,yEAAU,E;;;;;;;;;;;;ACvEzB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,+EAAgB,E;;;;;;;;;;;;ACvF/B;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+B;AACA;;AAEA;;AAEe,yEAAU,E;;;;;;;;;;;;ACtCzB;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,QAAQ;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,UAAU;AAC1C,gCAAgC,UAAU;;AAE1C;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC3DvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACD;AACJ;AACH;AACA;AACI;;AAEpC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,oDAAU,EAAE,2BAA2B;AAC1D,mBAAmB,oDAAU,EAAE,6BAA6B;AAC5D,mBAAmB,oDAAU,EAAE,+BAA+B;AAC9D;;AAEA,wBAAwB,kDAAQ;AAChC,uBAAuB,gDAAO;AAC9B,yBAAyB,kDAAS;AAClC;;AAEA,uBAAuB,gDAAO;AAC9B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,+CAA+C,uDAAQ;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,oEAAK,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./App.js\");\n","import Synth from './synthesizer/synth';\nimport Keyboard from './GUI/keyboard';\nimport visualize from './GUI/visualizer';\n\nconst Ctx = window.AudioContext || window.webkitAudioContext;\nconst currContext = new Ctx();\nwindow.context = currContext;\nconst synthesizer = new Synth(currContext);\nwindow.synth = synthesizer;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const keyboard = new Keyboard(synthesizer);\n  window.keyboard = keyboard;\n  const draw = visualize(synthesizer);\n\n\n  draw();\n});","class Keyboard {\n  constructor(synth) {\n    this.synth = synth;\n    this.playNote = this.playNote.bind(this);\n    this.setupEventListeners();\n  }\n\n  setupEventListeners() {\n    const C = document.getElementById(\"C\")\n    C.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"C\");\n      func();\n    })\n    C.addEventListener(\"mouseup\", this.synth.stop)\n\n    const Cs = document.getElementById(\"Cs\")\n    Cs.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"Cs\");\n      func();\n    })\n    Cs.addEventListener(\"mouseup\", this.synth.stop)\n\n    const D = document.getElementById(\"D\")\n    D.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"D\");\n      func();\n    })\n    D.addEventListener(\"mouseup\", this.synth.stop)\n\n    const Ds = document.getElementById(\"Ds\")\n    Ds.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"Ds\");\n      func();\n    })\n    Ds.addEventListener(\"mouseup\", this.synth.stop)\n\n    const E = document.getElementById(\"E\")\n    E.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"E\");\n      func();\n    })\n    E.addEventListener(\"mouseup\", this.synth.stop)\n\n    const F = document.getElementById(\"F\")\n    F.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"F\");\n      func();\n    })\n    F.addEventListener(\"mouseup\", this.synth.stop)\n\n    const Fs = document.getElementById(\"Fs\")\n    Fs.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"Fs\");\n      func();\n    })\n    Fs.addEventListener(\"mouseup\", this.synth.stop)\n\n    const G = document.getElementById(\"G\")\n    G.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"G\");\n      func();\n    })\n    G.addEventListener(\"mouseup\", this.synth.stop)\n\n    const Gs = document.getElementById(\"Gs\")\n    Gs.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"Gs\");\n      func();\n    })\n    Gs.addEventListener(\"mouseup\", this.synth.stop);\n\n    const A = document.getElementById(\"A\")\n    A.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"A\");\n      func();\n    })\n    A.addEventListener(\"mouseup\", this.synth.stop)\n\n    const As = document.getElementById(\"As\")\n    As.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"As\");\n      func();\n    })\n    As.addEventListener(\"mouseup\", this.synth.stop)\n\n    const B = document.getElementById(\"B\")\n    B.addEventListener(\"mousedown\", (e) => {\n      e.stopPropagation();\n      let func = this.playNote(\"B\");\n      func();\n    })\n    B.addEventListener(\"mouseup\", this.synth.stop)\n\n    document.addEventListener(\"keydown\", (e) => {\n      const key = e.key.toLowerCase();\n      if (key === \"a\") {\n        let func = this.playNote(\"C\")\n        func();\n      } else if (key === \"w\") {\n        let func = this.playNote(\"Cs\")\n        func();\n      } else if (key === \"s\") {\n        let func = this.playNote(\"D\")\n        func();\n      } else if (key === \"e\") {\n        let func = this.playNote(\"Ds\")\n        func();\n      } else if (key === \"d\") {\n        let func = this.playNote(\"E\")\n        func();\n      } else if (key === \"f\") {\n        let func = this.playNote(\"F\")\n        func();\n      } else if (key === \"t\") {\n        let func = this.playNote(\"Fs\")\n        func();\n      } else if (key === \"g\") {\n        let func = this.playNote(\"G\")\n        func();\n      } else if (key === \"y\") {\n        let func = this.playNote(\"Gs\")\n        func();\n      } else if (key === \"h\") {\n        let func = this.playNote(\"A\")\n        func();\n      } else if (key === \"u\") {\n        let func = this.playNote(\"As\")\n        func();\n      } else if (key === \"j\") {\n        let func = this.playNote(\"B\")\n        func();\n      }\n    }); \n\n    document.addEventListener(\"keyup\", this.synth.stop)\n  }\n\n  playNote(note) {\n    let notePlay = note + this.synth.octave;\n    return(() => {\n      this.synth.playNote(notePlay);\n    })\n  }\n}\n\nexport default Keyboard;","function visualize(synth) {\n\n  const canvas = document.getElementById(\"visualizer\");\n  const ctx = canvas.getContext(\"2d\");\n\n  synth.analyzer.fftSize = 2048;\n\n  const length = synth.analyzer.frequencyBinCount;\n  const data = new Uint8Array(length);\n\n  return function draw() { \n    let visual = requestAnimationFrame(draw);\n\n    synth.analyzer.getByteTimeDomainData(data);\n\n    ctx.fillStyle = 'rgb(0, 0, 0)';\n    ctx.fillRect(0,0, canvas.width, canvas.height);\n\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(100, 255, 100)';\n    ctx.beginPath();\n\n    let sliceWidth = canvas.width / length;\n    let x = 0;\n\n    for (let i = 0; i < length; i++) {\n      let v = data[i] / 128;\n      let y = v * canvas.height / 2;\n\n      if(i == 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x = x + sliceWidth;\n    }\n    ctx.lineTo(canvas.width, canvas.height/2);\n    ctx.stroke();\n  }\n}\n\nexport default visualize;","class Effects {\n\n  constructor(ctx, filterBank) {\n    this.context = ctx;\n    this.premixer = { dry: new GainNode(ctx, {gain: .5}), wet: new GainNode(ctx, {gain: .5})};\n\n    //connect filters to master dry/wet mix\n    filterBank.connect(this.premixer.dry);\n    filterBank.connect(this.premixer.wet);\n\n    this.distortion = new WaveShaperNode(ctx, {curve: this.makeDistortionCurve(0), oversample: \"4x\"});\n    this.reverb = new ConvolverNode(ctx);\n\n    this.premixer.wet.connect(this.distortion);\n  }\n\n  makeDistortionCurve(amount) {\n    const k = amount\n    const numSamples = 4410;\n    let curve = new Float32Array(numSamples);\n    const degree = Math.PI / 180;\n    let x;\n    for(let i = 0; i < numSamples; i++) {\n      x = i * 2 / numSamples - 1;\n      curve[i] = ( 3 + k ) * x * 20 * degree / (Math.PI + k * Math.abs(x) );\n    }\n    return curve;\n  }\n\n  connect(connection) {\n    this.distortion.connect(connection);\n    this.premixer.dry.connect(connection);\n  }\n\n}\n\nexport default Effects","class Envelopes {\n  constructor(ctx, synth, premixer, filters) {\n    this.context = ctx;\n    this.synth = synth;\n    this.filters = filters;\n    this.filterAmt = 1.4;\n    this.ampOut = premixer.ampOut;\n\n    this.amp = {attack: 0, release: .1}\n    this.filter = {attack: .5, release: .1}\n\n    this.attack = this.attack.bind(this);\n    this.release = this.release.bind(this);\n  }\n\n  setAmpEnvelope(options) {\n    Object.keys(options).forEach( (param) => {\n      this.amp[param] = options.param;\n    });\n  }\n\n  setFilterEnvelope(options) {\n    Object.keys(options).forEach( (param) => {\n      this.amp[param] = options.param;\n    });\n  }\n\n  attack() {\n    let ampStepSize;\n    if(this.amp.attack <= 0) {\n      ampStepSize = 1;\n    } else { \n      ampStepSize = 1 / (this.amp.attack * 1000 / 5)\n    }\n\n    let filterStepSize;\n    if(this.filter.attack <= 0) {\n      filterStepSize = 1000 * this.filterAmt\n    } else {\n      filterStepSize = (1000 * this.filterAmt) / (this.filter.attack * 1000 / 5)\n    }\n\n    const filterTarget = this.filters.filter1.frequency.value + (800 * this.filterAmt);\n\n    setInterval(function(){\n      this.step(ampStepSize, filterStepSize, filterTarget)}.bind(this), 5);\n  }\n\n  release() {\n    let ampStepSize;\n    if(this.amp.attack <= 0) {\n      ampStepSize = 1;\n    } else { \n      ampStepSize = 1 / (this.amp.attack * 1000 / 5)\n    }\n\n    let filterStepSize;\n    if(this.filter.attack <= 0) {\n      filterStepSize = 1000 * this.filterAmt\n    } else {\n      filterStepSize = (1000 * this.filterAmt) / (this.filter.attack * 1000 / 5)\n    }\n\n    const filterTarget = this.filters.filter1.frequency.value + (800 * this.filterAmt);\n\n    setInterval(function(){\n      this.step(ampStepSize, filterStepSize, filterTarget)}.bind(this), 5);\n  }\n\n  step(ampStep, filterStep, filter1Target) {\n    if (this.ampOut.gain.value < 1) {\n      this.ampOut.gain.value = this.ampOut.gain.value + ampStep;\n    }\n    if (this.filters.filter1.frequency.value < filter1Target) {\n      this.filters.filter2.frequency.value = this.filters.filter2.frequency.value + filterStep;\n      this.filters.filter1.frequency.value = this.filters.filter1.frequency.value + filterStep;\n    }\n    if(this.ampOut.gain.value >= 1 && this.filters.filter1.frequency.value >= filter1Target) {\n      clearInterval();\n    } \n  }\n}\n\nexport default Envelopes;","class FilterBank {\n\n  constructor(ctx) {\n    this.context = ctx;\n    \n    this.filter1 = new BiquadFilterNode(ctx, {frequency: 400});\n    this.filter2 = new BiquadFilterNode(ctx, {frequency: 400});\n    this.base1 = 400;\n    this.base = 400;\n\n    this.filterBank = [this.filter1, this.filter2]\n\n    this.out1 = new GainNode(ctx, {gain: 0.5});\n    this.out2 = new GainNode(ctx, {gain:0.5});\n    this.series = new GainNode(ctx, {gain: 0});\n\n    this.filter1.connect(this.out1);\n    this.filter2.connect(this.out2);\n\n    this.filter1.connect(this.series);\n    this.series.connect(this.filter2);\n  }\n\n  setFrequency(num, freq) {\n    this.filterBank[num].frequency.value = freq;\n  }\n\n  setQ(num, ammt) {\n    this.filterBank[num].Q.value = ammt;\n  }\n\n  setType(num, type){\n    this.filterBank[num].type = type;\n  }\n\n  setEnvelope(amt){\n    if (amt > 1) {\n      this.envAmt = 1;\n    } else if (amt < 0) {\n      this.envAmt = 0;\n    } else {\n      this.envAmt = amt;\n    }\n  }\n\n  setLevels(options){\n    if (options.out1 !== undefined) {\n      options.out1 > .5 ? this.out1.gain.value = .5 : this.out1.gain.value = options.out1;\n    }\n    if (options.series !== undefined) {\n      if (options.series > .5) {\n        this.series.gain.value = .5;\n      } else {\n        this.series.gain.value = options.series;\n      }\n      if (this.out1.gain.value + this.series.gain.value > .5) {\n        this.out1.gain.value = .5 - this.series.gain.value;\n      }\n    }\n    if (options.out2 !== undefined) {\n      options.out2 > .5 ? this.out2.gain.value = .5 + this.series.gain.value : this.out2.gain.value = options.out2 + this.series.gain.value;\n    }\n  }\n\n  connect(connection) {\n    this.out2.connect(connection);\n    this.out1.connect(connection);\n  }\n\n}\n\nexport default FilterBank;","const scaleToSemitones = {\n  C1: -45,\n  Cs1: -44,\n  D1: -43,\n  Ds1: -42,\n  E1: -41,\n  F1: -40,\n  Fs1: -39,\n  G1: -38,\n  Gs1: -37,\n  A1: -36,\n  As1: -35,\n  B1: -34,\n  C2: -33,\n  Cs2: -32,\n  D2: -31,\n  Ds2: -30,\n  E2: -29,\n  F2: -28,\n  Fs2: -27,\n  G2: -26,\n  Gs2: -25,\n  A2: -24,\n  As2: -23,\n  B2: -22,\n  C3: -21,\n  Cs3: -20,\n  D3: -19,\n  Ds3: -18,\n  E3: -17,\n  F3: -16,\n  Fs3: -15,\n  G3: -14,\n  Gs3: -13,\n  A3: -12,\n  As3: -11,\n  B3: -10,\n  C4: -9,\n  Cs4: -8,\n  D4: -7,\n  Ds4: -6,\n  E4: -5,\n  F4: -4,\n  Fs4: -3,\n  G4: -2,\n  Gs4: -1,\n  A4: 0,\n  As4: 1,\n  B4: 2,\n  C5: 3,\n  Cs5: 4,\n  D5: 5,\n  Ds5: 6,\n  E5: 7,\n  F5: 8,\n  Fs5: 9,\n  G5: 10,\n  Gs5: 11,\n  A5: 12,\n  As5: 13,\n  B5: 14,\n  C6: 15,\n  Cs6: 16,\n  D6: 17,\n  Ds6: 18,\n  E6: 19,\n  F6: 20,\n  Fs6: 21,\n  G6: 22,\n  Gs6: 23,\n  A6: 24,\n  As6: 25,\n  B6: 26,\n  C7: 27,\n  Cs7: 28,\n  D7: 29,\n  Ds7: 30,\n  E7: 31,\n  F7: 32,\n  Fs7: 33,\n  G7: 34,\n  Gs7: 35,\n  A7: 36,\n  As7: 37,\n  B7: 38,\n}\n\nexport default scaleToSemitones;","class Oscillator {\n\n  constructor(options) {\n    this.type = options.type;\n    this.state = \"stop\";\n    this.context = options.context;\n    this.interval = 0;\n    this.frequency = 440;\n    this.semitone = Math.pow(2, 1/12);\n    this.node = new OscillatorNode(this.context, {type: this.type});\n    this.volumeNode = this.context.createGain();\n    this.node.connect(this.volumeNode);\n    this.endpoint = this.volumeNode;\n    this.node.start();\n  }\n\n  setInterval(semitones) {\n    this.interval = semitones;\n    this.setFrequency(this.frequency);\n  }\n\n  setFrequency(freq) {\n    this.frequency = freq;\n    let frequency = freq * Math.pow(this.semitone, this.interval);\n    this.node.frequency.setValueAtTime(frequency, this.context.currentTime);\n  }\n\n  setWave(form) {\n    this.node.type = form;\n  }\n\n  connect(connection) {\n    this.endpoint.connect(connection);\n    this.endpoint = connection; \n  }\n\n}\n\nexport default Oscillator;","class PreMixer {\n\n  constructor(ctx, oscillators) {\n\n    this.compressor = ctx.createDynamicsCompressor();\n    this.level1 = ctx.createGain();\n    this.level2 = ctx.createGain();\n    this.level3 = ctx.createGain();\n\n    this.ampOut = new GainNode(ctx, {gain: 0});\n\n    oscillators[0].connect(this.level1);\n    oscillators[1].connect(this.level2);\n    oscillators[2].connect(this.level3);\n\n    this.level1.connect(this.compressor);\n    this.level2.connect(this.compressor);\n    this.level3.connect(this.compressor);\n\n    this.out1 = ctx.createGain({gain: 0.5});\n    this.out2 = ctx.createGain({gain: 0.5});\n    \n    this.compressor.connect(this.ampOut);\n\n    this.ampOut.connect(this.out1);\n    this.ampOut.connect(this.out2);\n  }\n\n  setLevels(options) {\n\n    if (options.level1 !== undefined) {\n      this.level1.gain.value = options.level1\n    }\n\n    if (options.level2 !== undefined) {\n      this.level2.gain.value = options.level2\n    }\n\n    if (options.level3 !== undefined) {\n      this.level3.gain.value = options.level3\n    }\n  }\n\n  setOutput(out1Level) {\n    if(out1Level > 1) {\n      this.out1.gain.value = 1;\n    } else {\n      this.out1.gain.value = out1Level;\n    }\n    this.out2Level = 1 - this.out1Level;\n  }\n\n  connect(filters) {\n    this.out1.connect(filters.filter1);\n    this.out2.connect(filters.filter2);\n  }\n\n}\n\nexport default PreMixer;","import ScaleMap from './keyboard_scale';\nimport Oscillator from './oscillators';\nimport PreMixer from './pre_mixer';\nimport Filters from './filters';\nimport Effects from './effects';\nimport Envelopes from './envelopes';\n\nclass Synth {\n\n  constructor(ctx) {\n    this.state = \"pause\";\n\n    this.context = ctx;\n    this.masterFreq = 440;\n    this.semitone = Math.pow(2, 1/12);\n    this.octave = 3;\n\n    let osc1 = new Oscillator({type: \"sine\", context: ctx});\n    let osc2 = new Oscillator({type: \"square\", context: ctx});\n    let osc3 = new Oscillator({type: \"sawtooth\", context: ctx});\n    this.oscBank = [osc1, osc2, osc3]\n    \n    this.preMixer = new PreMixer(ctx, this.oscBank);\n    this.filters = new Filters(ctx);\n    this.envelopes = new Envelopes(ctx, this, this.preMixer, this.filters);\n    this.preMixer.connect(this.filters);\n\n    this.effects = new Effects(ctx, this.filters);\n    this.analyzer = ctx.createAnalyser();\n\n    this.effects.connect(this.analyzer);\n    this.analyzer.connect(ctx.destination);\n\n    this.stop = this.stop.bind(this);\n  }\n\n  preMix(options) {\n    this.preMixer.setLevels(options);\n  }\n\n  setFilterOptions(options) {\n    if(options.envAmt !== undefined) {\n      this.filters.setEnvelope(options.envAmt);\n    }\n\n    if (options.filter1 !== undefined) {\n      let f1options = options.filter1;\n      if(f1options.frequency !== undefined) {\n        this.filters.setFrequency(0, f1options.frequency);\n      }\n      if(f1options.Q !== undefined ) {\n        this.filters.setQ(0, f1options.Q)\n      }\n      if (f1options.type !== undefined) {\n        this.filters.setType(0, f1options.type);\n      }\n    }\n\n    if (options.filter2 !== undefined) {\n      let f2options = options.filter2;\n      if(f2options.frequency !== undefined) {\n        this.filters.setFrequency(1, f2options.frequency);\n      }\n      if(f2options.Q !== undefined ) {\n        this.filters.setQ(1, f2options.Q)\n      }\n      if (f2options.type !== undefined) {\n        this.filters.setType(1, f2options.type);\n      }\n    }\n\n  }\n\n  setFilterLevels(options) {\n    this.filters.setLevels(options);\n  }\n\n  playFreq(freq) {\n    this.state = \"play\";\n    if (this.context.state === \"suspended\") {\n      this.context.resume();\n    }\n    this.oscBank.forEach( function(oscillator) {\n      oscillator.setFrequency(freq);\n    })\n\n    this.envelopes.attack();\n  }\n\n  playNote(note) {\n    const freq = 440 * Math.pow(this.semitone, ScaleMap[note]);\n    this.playFreq(freq);\n  }\n\n  stop() {\n    this.state = \"pause\"\n    this.envelopes.release();\n  }\n\n  setWaveform(options) {\n    this.oscBank[options.index].setWave(options.type);\n  }\n\n  setOscInterval(options) {\n    this.oscBank[options.index].setInterval(options.semitones);\n  }\n}\n\nexport default Synth;"],"sourceRoot":""}